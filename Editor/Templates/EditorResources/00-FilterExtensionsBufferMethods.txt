public void RemoveT#INDEX#(int index) {
    if (this.regs#INDEX#->components.HasPtr(this.allocator, this.indexes[index]).state > 0) {
        this.ops#INDEX#.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T#INDEX#>.burstTypeId.Data, code = 2, });
    }
}
public void Set(int index, in T#INDEX# component) {
    var entityId = this.indexes[index];
    #if WORLD_STATE_CHECK
    if (this.regs#INDEX#->components.HasDataPtr(this.allocator, entityId) == false) {
        E.THROW_FILTER_BAG_COMPONENT_NOT_EXISTS();
    }
    #endif
    ref var componentData = ref this.regs#INDEX#->components.GetPtr(this.allocator, this.indexes[index]);
    if (DataBlittableBurstBufferUtils.NeedToPush(in *this.allocator, this.tick, ref this.entityVersions, entityId, ref componentData, in component) == true) {
        this.ops#INDEX#.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T#INDEX#>.burstTypeId.Data, code = 1, });
        componentData.data = component;
    }
}
public ref T#INDEX# GetT#INDEX#(int index) {
    var entityId = this.indexes[index];
    #if WORLD_STATE_CHECK
    if (this.regs#INDEX#->components.HasDataPtr(this.allocator, entityId) == false) {
        E.THROW_FILTER_BAG_COMPONENT_NOT_EXISTS();
    }
    #endif
    this.ops#INDEX#.Write(new Op() { entityIndex = index, componentId = AllComponentTypes<T#INDEX#>.burstTypeId.Data, code = 1, });
    return ref this.regs#INDEX#->components.GetPtr(this.allocator, entityId).data;
}
public T#INDEX# ReadT#INDEX#(int index) => this.regs#INDEX#->components.ReadPtr(this.allocator, this.indexes[index]).data;
public bool HasT#INDEX#(int index) => this.regs#INDEX#->components.HasPtr(this.allocator, this.indexes[index]).state > 0;
public long GetVersionT#INDEX#(int index) => this.regs#INDEX#->components.ReadPtr(this.allocator, this.indexes[index]).version;
