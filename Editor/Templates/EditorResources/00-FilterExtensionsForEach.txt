#if ENABLE_IL2CPP
#define INLINE_METHODS
#endif

namespace ME.ECS {

    using Filters;
    using Buffers;
    using ME.ECS.Collections;
    using ME.ECS.Collections.V3;
    
    using Unity.Burst;
    using Unity.Jobs;
    using Unity.Collections.LowLevel.Unsafe;
    using System.Runtime.InteropServices;

    public interface IFilterBag {
        int Count { get; }
        void BeginForEachIndex(int chunkIndex);
        void EndForEachIndex();
    }

    public unsafe struct Ptr {

        public Collections.MemoryAllocator.SparseSetData value;

    }

    public struct Op {

        public int entityIndex;
        public int componentId; // -1 = entity
        public byte code; // 1 - change, 2 - remove

    }
    
    public struct Ops {

        public int Length => this.items.Length;
        private Unity.Collections.NativeArray<Op> items;
        private Unity.Collections.NativeArray<bool> exist;
        
        public Ops(int length) {
            
            this.items = new Unity.Collections.NativeArray<Op>(length, Unity.Collections.Allocator.Temp);
            this.exist = new Unity.Collections.NativeArray<bool>(length, Unity.Collections.Allocator.Temp);
            
        }

        public void Write(Op op) {
            
            this.items[op.entityIndex] = op;
            this.exist[op.entityIndex] = true;

        }

        public bool Read(int index, out Op op) {

            if (this.exist[index] == true) {
                op = this.items[index];
                return true;
            }

            op = default;
            return false;

        }

        public void BeginForEachIndex(int index) {
            
        }

        public void EndForEachIndex() {
            
        }

        public void Dispose() {

            this.items.Dispose();
            this.exist.Dispose();

        }

    }
    
    namespace Buffers {

        #CONTENT_BUFFERS#

    }
    
    public static class FiltersForEachExtensions {

        #CONTENT#

    }

}